#version 450

#extension GL_GOOGLE_include_directive : require
#include "bindless.glsl"

layout(local_size_x = 16, local_size_y = 16, local_size_z = 1) in;

layout(set = 1, binding = 0, rgba32f) uniform image2D output_image;

layout( push_constant ) uniform constants {
    uint hdr;
    float gamma;
    float exposure;
} pc;

vec3 aces(vec3 color)
{
    color *= 0.6;
    float a = 2.51;
    float b = 0.03;
    float c = 2.43;
    float d = 0.59;
    float e = 0.14;
    return clamp((color * (a * color + b)) / (color * (c * color + d) + e), 0.0, 1.0);
}

vec3 neutral(vec3 color)
{
    const float startCompression = 0.8 - 0.04;
    const float desaturation = 0.15;

    float x = min(color.r, min(color.g, color.b));
    float offset = x < 0.08 ? x - 6.25 * x * x : 0.04;
    color -= offset;

    float peak = max(color.r, max(color.g, color.b));
    if (peak < startCompression)
        return color;

    const float d = 1.0 - startCompression;
    float newPeak = 1.0 - d * d / (peak + d - startCompression);
    color *= newPeak / peak;

    float g = 1.0 - 1.0 / (desaturation * (peak - newPeak) + 1.0);
    return mix(color, vec3(newPeak), g);
}

void main()
{
    ivec2 tex_coords = ivec2(gl_GlobalInvocationID.xy);
    ivec2 dims = imageSize(output_image);
    vec2 uv = vec2(tex_coords) / vec2(dims);

    vec3 color = sampleTexture2DNearest(pc.hdr, uv).rgb;

    // exposure
    color = vec3(1.0) - exp(-color * pc.exposure);

    // tone mapper
    color = neutral(color);

    // gamma correction
    color = pow(color, vec3(1.0f / pc.gamma));

    imageStore(output_image, ivec2(gl_GlobalInvocationID), vec4(color, 1.0f));
}
