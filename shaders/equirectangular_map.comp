#version 450
#extension GL_EXT_nonuniform_qualifier : enable

layout (local_size_x = 16, local_size_y = 16, local_size_z = 1) in;

layout (set = 0, binding = 0) uniform texture2D textures[];
layout (set = 0, binding = 0) uniform texture2DMS texturesMS[];
layout (set = 0, binding = 0) uniform textureCube textureCubes[];
layout (set = 0, binding = 0) uniform texture2DArray textureArrays[];
layout (set = 0, binding = 1) uniform sampler samplers[];

layout (set = 1, binding = 0, rgba32f) uniform imageCube outputCubemap;

#define NEAREST_SAMPLER_ID 0
#define LINEAR_SAMPLER_ID  1
#define SHADOW_SAMPLER_ID  2

layout (push_constant) uniform PushConstant {
    int inputTextureID;
} pc;

vec4 sampleTexture2DNearest(uint texID, vec2 uv) {
    return texture(nonuniformEXT(sampler2D(textures[texID], samplers[NEAREST_SAMPLER_ID])), uv);
}

const float PI = 3.14159265359;

vec3 getSampleDirection(ivec3 cubeCoord, ivec2 cubeSize) {
    vec2 uv = vec2(cubeCoord.xy) / vec2(cubeSize) * 2.0 - 1.0;
    vec3 dir;
    
    switch(cubeCoord.z) {
        case 0: dir = vec3(1.0, -uv.y, -uv.x); break;  // Positive X
        case 1: dir = vec3(-1.0, -uv.y, uv.x); break;  // Negative X
        case 2: dir = vec3(uv.x, 1.0, uv.y); break;    // Positive Y
        case 3: dir = vec3(uv.x, -1.0, -uv.y); break;  // Negative Y
        case 4: dir = vec3(uv.x, -uv.y, 1.0); break;   // Positive Z
        case 5: dir = vec3(-uv.x, -uv.y, -1.0); break; // Negative Z
    }
    
    return normalize(dir);
}

vec2 sampleSphericalMap(vec3 dir) {
    vec2 uv = vec2(atan(dir.z, dir.x), asin(dir.y));
    uv *= vec2(0.1591, 0.3183); // 1/(2*pi), 1/pi
    uv += 0.5;
    return uv;
}

void main() {
    ivec3 outputCoord = ivec3(gl_GlobalInvocationID.xyz);
    ivec2 outputSize = imageSize(outputCubemap).xy;
    
    if (outputCoord.x >= outputSize.x || outputCoord.y >= outputSize.y || outputCoord.z >= 6) {
        return;
    }
    
    vec3 dir = getSampleDirection(outputCoord, outputSize);
    vec2 uv = sampleSphericalMap(dir);
    
    vec4 color = sampleTexture2DNearest(pc.inputTextureID, uv);
    
    imageStore(outputCubemap, outputCoord, color);
}