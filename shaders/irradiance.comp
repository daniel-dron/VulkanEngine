#version 450

#extension GL_GOOGLE_include_directive : require
#include "bindless.glsl"

layout (local_size_x = 16, local_size_y = 16, local_size_z = 1) in;

layout (push_constant) uniform PushConstant {
    int inputTextureID;
    int outputTextureID;
} pc;

const float PI = 3.14159265359;

vec3 getCubeMapTexCoord() {
    ivec2 pixelCoords = ivec2(gl_GlobalInvocationID.xy);
    ivec2 dims = GetStorageImageSize(pc.outputTextureID);
    vec2 texCoord = vec2(pixelCoords) / vec2(dims);
    texCoord = texCoord * 2.0 - 1.0; // -1..1 range

    uint faceIndex = gl_GlobalInvocationID.z;

    switch(faceIndex) {
        case 0: return vec3(1.0, -texCoord.y, -texCoord.x);
        case 1: return vec3(-1.0, -texCoord.y, texCoord.x);
        case 2: return vec3(texCoord.x, 1.0, texCoord.y);    // Top (+Y)
        case 3: return vec3(texCoord.x, -1.0, -texCoord.y);  // Bottom (-Y)
        case 4: return vec3(texCoord.x, -texCoord.y, 1.0);
        case 5: return vec3(-texCoord.x, -texCoord.y, -1.0);
    }

    return vec3(0.0);
}

void main() {
    vec3 normal = normalize(getCubeMapTexCoord());

    vec3 irradiance = vec3(0.0);

    // Handle degenerate cases near poles (normal close to Y-axis)
    vec3 right = abs(normal.y) == 1.0 ? vec3(1.0, 0.0, 0.0) : normalize(cross(vec3(0.0, 1.0, 0.0), normal));
    vec3 up = normalize(cross(normal, right));

    float sampleDelta = 0.005;  // Increased sample count for better precision
    float nrSamples = 0.0;

    for(float phi = 0.0; phi < 2.0 * PI; phi += sampleDelta) {
        for(float theta = 0.0; theta < 0.5 * PI; theta += sampleDelta) {
            vec3 tangentSample = vec3(sin(theta) * cos(phi), sin(theta) * sin(phi), cos(theta));
            vec3 sampleVec = tangentSample.x * right + tangentSample.y * up + tangentSample.z * normal;

            irradiance += sampleTextureCubeLinear(pc.inputTextureID, sampleVec).rgb * cos(theta) * sin(theta);
            nrSamples++;
        }
    }

    irradiance = PI * irradiance * (1.0 / nrSamples);

    StorageCubemapPixelAt(pc.outputTextureID, ivec3(gl_GlobalInvocationID), vec4(irradiance, 1.0f));
}