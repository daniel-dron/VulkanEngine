#version 450

#extension GL_GOOGLE_include_directive : require
#include "bindless.glsl"

layout (local_size_x = 16, local_size_y = 16, local_size_z = 1) in;

layout (push_constant) uniform PushConstant {
    int input_id;
    int output_id;
    int mipmap;
    float roughness;
} pc;

const float PI = 3.14159265359;


// Helper function to convert texture coordinates into cubemap normal vectors
vec3 getCubeMapTexCoord() {
    ivec2 pixelCoords = ivec2(gl_GlobalInvocationID.xy);
    ivec2 dims = GetStorageImageSize(pc.output_id);
    vec2 texCoord = vec2(pixelCoords) / vec2(dims);

    texCoord = texCoord * 2.0 - 1.0;// Convert tex coords to -1..1 range

    uint faceIndex = gl_GlobalInvocationID.z;

    switch (faceIndex) {
        case 0: return vec3(1.0, -texCoord.y, -texCoord.x);// +X
        case 1: return vec3(-1.0, -texCoord.y, texCoord.x);// -X
        case 2: return vec3(texCoord.x, 1.0, texCoord.y);// +Y
        case 3: return vec3(texCoord.x, -1.0, -texCoord.y);// -Y
        case 4: return vec3(texCoord.x, -texCoord.y, 1.0);// +Z
        case 5: return vec3(-texCoord.x, -texCoord.y, -1.0);// -Z
    }

    return vec3(0.0);
}

// Importance sampling using GGX (Trowbridge-Reitz) distribution
vec3 importanceSampleGGX(vec2 Xi, vec3 N, float roughness) {
    float a = roughness * roughness;

    float phi = 2.0 * PI * Xi.x;
    float cosTheta = sqrt((1.0 - Xi.y) / (1.0 + (a * a - 1.0) * Xi.y));
    float sinTheta = sqrt(1.0 - cosTheta * cosTheta);

    // Spherical coordinates to Cartesian coordinates
    vec3 H = vec3(cos(phi) * sinTheta, sin(phi) * sinTheta, cosTheta);

    // Tangent-to-world space
    vec3 up = abs(N.z) < 0.999 ? vec3(0.0, 0.0, 1.0) : vec3(1.0, 0.0, 0.0);
    vec3 tangent = normalize(cross(up, N));
    vec3 bitangent = cross(N, tangent);

    vec3 sampleVec = tangent * H.x + bitangent * H.y + N * H.z;
    return normalize(sampleVec);
}

void main() {
    vec3 N = normalize(getCubeMapTexCoord());// Get normal direction from cubemap
    vec3 R = N;// Reflection direction is aligned with normal for the prefiltering

    vec3 prefilteredColor = vec3(0.0);
    float totalWeight = 0.0;

    int numSamples = 1024;// Number of samples to take per pixel

    for (int i = 0; i < numSamples; ++i) {
        // Generate a random 2D point for sampling (this should be stratified or better sampling in practice)
        vec2 Xi = vec2(float(i) / float(numSamples), fract(sin(float(i)) * 43758.5453));

        // Sample reflection direction based on roughness
        vec3 H = importanceSampleGGX(Xi, R, pc.roughness);
        vec3 L = normalize(reflect(-R, H));// The light direction

        float NdotL = max(dot(N, L), 0.0);
        if (NdotL > 0.0) {
            // Sample the environment cubemap with the light direction
            vec3 envColor = sampleTextureCubeLinear(pc.input_id, L).rgb;

            // Accumulate the contribution with NdotL weighting
            prefilteredColor += envColor * NdotL;
            totalWeight += NdotL;
        }
    }

    // Divide by the accumulated weights to get the average color
    prefilteredColor = prefilteredColor / totalWeight;

    // Store the result in the mipmapped cubemap (based on the mipmap level)
    StorageCubemapPixelAt(pc.output_id, ivec3(gl_GlobalInvocationID), vec4(prefilteredColor, 1.0));
}