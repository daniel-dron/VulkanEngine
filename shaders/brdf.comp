#version 450

#extension GL_GOOGLE_include_directive : require
#include "bindless.glsl"

layout(local_size_x = 16, local_size_y = 16, local_size_z = 1) in;

// Output texture, 2D LUT for BRDF (typically size 512x512)
layout(set = 1, binding = 0, rgba32f) uniform image2D outputBRDFLUT;

const float PI = 3.14159265359;

// Importance sampling using cosine-weighted hemisphere sampling
vec3 importanceSampleGGX(vec2 Xi, vec3 N, float roughness) {
    float a = roughness * roughness;

    float phi = 2.0 * PI * Xi.x;
    float cosTheta = sqrt((1.0 - Xi.y) / (1.0 + (a * a - 1.0) * Xi.y));
    float sinTheta = sqrt(1.0 - cosTheta * cosTheta);

    // Spherical to cartesian coordinates
    vec3 H;
    H.x = sinTheta * cos(phi);
    H.y = sinTheta * sin(phi);
    H.z = cosTheta;

    // Tangent-space to world-space
    vec3 up = abs(N.z) < 0.999 ? vec3(0.0, 0.0, 1.0) : vec3(1.0, 0.0, 0.0);
    vec3 tangentX = normalize(cross(up, N));
    vec3 tangentY = cross(N, tangentX);

    return normalize(tangentX * H.x + tangentY * H.y + N * H.z);
}

// Fresnel-Schlick approximation for specular reflection
vec3 fresnelSchlick(float cosTheta, vec3 F0) {
    return F0 + (1.0 - F0) * pow(1.0 - cosTheta, 5.0);
}

float geometrySchlickGGX(float NdotV, float roughness) {
    float k = (roughness * roughness) / 2.0;
    return NdotV / (NdotV * (1.0 - k) + k);
}

// Pre-integrated BRDF LUT generation
void main() {
    ivec2 texCoords = ivec2(gl_GlobalInvocationID.xy);
    ivec2 dims = imageSize(outputBRDFLUT);
    vec2 uv = vec2(texCoords) / vec2(dims);

    float NdotV = uv.x; // x-axis: NdotV (from 0 to 1)
    float roughness = uv.y; // y-axis: roughness (from 0 to 1)

    vec3 V = vec3(sqrt(1.0 - NdotV * NdotV), 0.0, NdotV); // view direction (normalized)
    
    float A = 0.0;
    float B = 0.0;

    const int SAMPLE_COUNT = 128; // Number of samples for Monte Carlo integration
    for (int i = 0; i < SAMPLE_COUNT; ++i) {
        // Random numbers for importance sampling
        vec2 Xi = vec2(float(i) / float(SAMPLE_COUNT), fract(sin(float(i) * 12.9898 + 78.233) * 43758.5453));
        
        // Sample microfacet normal (H) using importance sampling
        vec3 H = importanceSampleGGX(Xi, vec3(0.0, 0.0, 1.0), roughness);
        vec3 L = normalize(2.0 * dot(V, H) * H - V); // Reflection vector from H

        float NdotL = max(L.z, 0.0);
        float NdotH = max(H.z, 0.0);
        float VdotH = max(dot(V, H), 0.0);

        if (NdotL > 0.0) {
            float G = geometrySchlickGGX(NdotV, roughness) * geometrySchlickGGX(NdotL, roughness);
            float F = fresnelSchlick(VdotH, vec3(0.04)).r; // Use F0 = 0.04 (for dielectric)

            float nom = F * G * VdotH;
            float denom = NdotH * NdotV * 4.0;

            A += (nom / max(denom, 0.001));
            B += F * (1.0 - F) * G * NdotL;
        }
    }

    A /= float(SAMPLE_COUNT);
    B /= float(SAMPLE_COUNT);

    imageStore(outputBRDFLUT, texCoords, vec4(A, B, 0.0, 1.0));
}